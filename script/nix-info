#! /usr/bin/env nix-shell
#! nix-shell -i runhaskell -p "haskellPackages.ghcWithPackages (h: [ h.turtle h.aeson h.string-conversions ])"

{-# LANGUAGE LambdaCase        #-}

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell   #-}

module Main (main) where

import           Prelude                 ()
import           Prelude.Compat          hiding (putStrLn)

import           Control.Applicative     (empty)

import           Data.Aeson
import           Data.Aeson.TH     (defaultOptions, deriveJSON)

import qualified Data.HashMap.Lazy as HM
import           Data.Text         (Text)
import           Data.Foldable           (for_, traverse_)
import           Data.Maybe              (catMaybes)
import           Data.String.Conversions (cs)

import qualified Data.Text      as T
import           Data.Text.IO   (putStrLn)

import           Turtle                  (ExitCode (..), Shell, arguments, echo,
                                          exit, liftIO, procStrict, sh)

-- -------------------------------------------------------------- [ Data Types ]

data Meta = Meta
  { description      :: Maybe Text
  , longDescription  :: Maybe Text
  , branch           :: Maybe Text
  , homepage         :: Maybe Text
  , downloadPage     :: Maybe Text
  , maintainers      :: Maybe [Text]
  , priority         :: Maybe Int
  , platforms        :: Maybe [Text]
  , hydraPlatforms   :: Maybe [Text]
  , broken           :: Maybe Bool
  , updateWalker     :: Maybe Bool
  , outputsToInstall :: Maybe [Text]
  , position         :: Maybe Text
  }
  deriving (Show)

data PackageInfo = PackageInfo
  { name   :: Text
  , system :: Text
  , meta   :: Meta
  }
  deriving (Show)

data Package = Package
  { path :: Text
  , info :: PackageInfo
  }
  deriving (Show)

newtype PackageList = PackageList [Package]

-- ------------------------------------------------------ [ FromJSON Instances ]

$(deriveJSON defaultOptions ''Meta)

$(deriveJSON defaultOptions ''PackageInfo)

instance FromJSON PackageList where
  parseJSON (Object v) =
    PackageList <$> traverse (\(p,y) -> Package p <$> parseJSON y) (HM.toList v)
  parseJSON _          = fail "non-object"

-- -------------------------------------------------------- [ Helper Functions ]

-- printPackage :: MonadIO io => Package -> io ()
printPackage :: Package -> IO ()
printPackage (Package pkgPath (PackageInfo pkgName _pkgSystem pkgMeta)) =
  traverse_ putStrLn $
  catMaybes
  [ Just pkgName
  -- , Just pkgSystem
  , description pkgMeta
  , homepage pkgMeta
  -- , T.unwords . T.words <$> longDescription pkgMeta
  , T.unwords <$> maintainers pkgMeta
  -- , T.unwords <$> outputsToInstall pkgMeta
  -- , T.unwords <$> platforms pkgMeta
  , Just pkgPath
  , position pkgMeta
  ]

nixQuery :: Text -> Shell (Maybe PackageList)
nixQuery arg =
  procStrict "nix-env" ["-qa", arg, "--json" ] empty >>= \case
  (ExitSuccess,txt) -> pure $ decode (cs txt)
  (status,_)        -> exit status

-- -------------------------------------------------------------------- [ Main ]

main :: IO ()
main =
  sh $ arguments >>= \case
  [arg] -> nixQuery arg >>= \case
           Just (PackageList pkgs) -> liftIO $ for_ pkgs printPackage
           Nothing                 -> exit $ ExitFailure 1
  _     -> do echo "TODO: usage"
              exit $ ExitFailure 1

-- --------------------------------------------------------------------- [ EOF ]
